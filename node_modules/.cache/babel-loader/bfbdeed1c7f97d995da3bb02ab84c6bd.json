{"ast":null,"code":"import _slicedToArray from\"C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Fragment,useState}from'react';import{Button,Tooltip}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TooltipControlled=function TooltipControlled(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),tooltipOpen=_useState2[0],setTooltipOpen=_useState2[1];return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Button.Ripple,{color:\"primary\",id:\"ControlledExample\",children:\"Controlled\"}),/*#__PURE__*/_jsx(Tooltip,{placement:\"top\",isOpen:tooltipOpen,target:\"ControlledExample\",toggle:function toggle(){return setTooltipOpen(!tooltipOpen);},children:\"Hello World !\"})]});};export default TooltipControlled;","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/src/views/components/tooltips/TooltipControlled.js"],"names":["Fragment","useState","Button","Tooltip","TooltipControlled","tooltipOpen","setTooltipOpen"],"mappings":"8KAAA,OAASA,QAAT,CAAmBC,QAAnB,KAAmC,OAAnC,CACA,OAASC,MAAT,CAAiBC,OAAjB,KAAgC,YAAhC,C,wFAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,cAAsCH,QAAQ,CAAC,KAAD,CAA9C,wCAAOI,WAAP,eAAoBC,cAApB,eAEA,mBACE,MAAC,QAAD,yBACE,KAAC,MAAD,CAAQ,MAAR,EAAe,KAAK,CAAC,SAArB,CAA+B,EAAE,CAAC,mBAAlC,wBADF,cAIE,KAAC,OAAD,EACE,SAAS,CAAC,KADZ,CAEE,MAAM,CAAED,WAFV,CAGE,MAAM,CAAC,mBAHT,CAIE,MAAM,CAAE,wBAAMC,CAAAA,cAAc,CAAC,CAACD,WAAF,CAApB,EAJV,2BAJF,GADF,CAeD,CAlBD,CAmBA,cAAeD,CAAAA,iBAAf","sourcesContent":["import { Fragment, useState } from 'react'\r\nimport { Button, Tooltip } from 'reactstrap'\r\n\r\nconst TooltipControlled = () => {\r\n  const [tooltipOpen, setTooltipOpen] = useState(false)\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button.Ripple color='primary' id='ControlledExample'>\r\n        Controlled\r\n      </Button.Ripple>\r\n      <Tooltip\r\n        placement='top'\r\n        isOpen={tooltipOpen}\r\n        target='ControlledExample'\r\n        toggle={() => setTooltipOpen(!tooltipOpen)}\r\n      >\r\n        Hello World !\r\n      </Tooltip>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default TooltipControlled\r\n"]},"metadata":{},"sourceType":"module"}