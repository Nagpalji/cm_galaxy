{"ast":null,"code":"import _toConsumableArray from\"C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";//** React Imports\nimport{useEffect}from'react';// ** Actions & Store\nimport{handleSkin}from'../../redux/actions/layout';import{useSelector,useDispatch}from'react-redux';export var useSkin=function useSkin(){var dispatch=useDispatch();var skin=useSelector(function(state){return state.layout.skin;});// ** Return a wrapped version of useState's setter function\nvar setValue=function setValue(value){try{// ** Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(skin):value;// ** Save to store & local storage\ndispatch(handleSkin(value));window.localStorage.setItem('skin',JSON.stringify(valueToStore));}catch(error){// ** A more advanced implementation would handle the error case\nconsole.log(error);}};useEffect(function(){var _element$classList;// ** Get Body Tag\nvar element=window.document.body;// ** Define classnames for skins\nvar classNames={dark:'dark-layout',bordered:'bordered-layout','semi-dark':'semi-dark-layout'};// ** Remove all classes from Body on mount\n(_element$classList=element.classList).remove.apply(_element$classList,_toConsumableArray(element.classList));// ** If skin is not light add skin class\nif(skin!=='light'){element.classList.add(classNames[skin]);}},[skin]);return[skin,setValue];};","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/src/utility/hooks/useSkin.js"],"names":["useEffect","handleSkin","useSelector","useDispatch","useSkin","dispatch","skin","state","layout","setValue","value","valueToStore","Function","window","localStorage","setItem","JSON","stringify","error","console","log","element","document","body","classNames","dark","bordered","classList","remove","add"],"mappings":"sLAAA;AACA,OAASA,SAAT,KAA0B,OAA1B,CAEA;AACA,OAASC,UAAT,KAA2B,4BAA3B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B,GAAMC,CAAAA,QAAQ,CAAGF,WAAW,EAA5B,CACA,GAAMG,CAAAA,IAAI,CAAGJ,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACC,MAAN,CAAaF,IAAjB,EAAN,CAAxB,CAEA;AACA,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxB,GAAI,CACF;AACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,WAAYE,CAAAA,QAAjB,CAA4BF,KAAK,CAACJ,IAAD,CAAjC,CAA0CI,KAA/D,CACA;AACAL,QAAQ,CAACJ,UAAU,CAACS,KAAD,CAAX,CAAR,CACAG,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAoCC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAApC,EACD,CAAC,MAAOO,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CACF,CAXD,CAaAlB,SAAS,CAAC,UAAM,wBACd;AACA,GAAMqB,CAAAA,OAAO,CAAGR,MAAM,CAACS,QAAP,CAAgBC,IAAhC,CAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,IAAI,CAAE,aADW,CAEjBC,QAAQ,CAAE,iBAFO,CAGjB,YAAa,kBAHI,CAAnB,CAMA;AACA,oBAAAL,OAAO,CAACM,SAAR,EAAkBC,MAAlB,6CAA4BP,OAAO,CAACM,SAApC,GAEA;AACA,GAAIrB,IAAI,GAAK,OAAb,CAAsB,CACpBe,OAAO,CAACM,SAAR,CAAkBE,GAAlB,CAAsBL,UAAU,CAAClB,IAAD,CAAhC,EACD,CACF,CAlBQ,CAkBN,CAACA,IAAD,CAlBM,CAAT,CAoBA,MAAO,CAACA,IAAD,CAAOG,QAAP,CAAP,CACD,CAvCM","sourcesContent":["//** React Imports\r\nimport { useEffect } from 'react'\r\n\r\n// ** Actions & Store\r\nimport { handleSkin } from '../../redux/actions/layout'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport const useSkin = () => {\r\n  const dispatch = useDispatch()\r\n  const skin = useSelector(state => state.layout.skin)\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(skin) : value\r\n      // ** Save to store & local storage\r\n      dispatch(handleSkin(value))\r\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore))\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // ** Get Body Tag\r\n    const element = window.document.body\r\n\r\n    // ** Define classnames for skins\r\n    const classNames = {\r\n      dark: 'dark-layout',\r\n      bordered: 'bordered-layout',\r\n      'semi-dark': 'semi-dark-layout'\r\n    }\r\n\r\n    // ** Remove all classes from Body on mount\r\n    element.classList.remove(...element.classList)\r\n\r\n    // ** If skin is not light add skin class\r\n    if (skin !== 'light') {\r\n      element.classList.add(classNames[skin])\r\n    }\r\n  }, [skin])\r\n\r\n  return [skin, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}