{"ast":null,"code":"import BaseSurface from '../core/surface';\nimport RootNode from './root-node';\nimport Group from '../shapes/group';\nimport transform from '../geometry/transform';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS } from './constants';\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\nimport ArcNode from './arc-node';\nimport CircleNode from './circle-node';\nimport GroupNode from './group-node';\nimport ImageNode from './image-node';\nimport MultiPathNode from './multi-path-node';\nimport PathNode from './path-node';\nimport RectNode from './rect-node';\nimport TextNode from './text-node';\nimport NODE_MAP from './node-map';\nNODE_MAP.Arc = ArcNode;\nNODE_MAP.Circle = CircleNode;\nNODE_MAP.Group = GroupNode;\nNODE_MAP.Image = ImageNode;\nNODE_MAP.MultiPath = MultiPathNode;\nNODE_MAP.Path = PathNode;\nNODE_MAP.Rect = RectNode;\nNODE_MAP.Text = TextNode;\nvar RTL = 'rtl';\n\nfunction alignToScreen(element) {\n  var ctm;\n\n  try {\n    ctm = element.getScreenCTM ? element.getScreenCTM() : null;\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  if (ctm) {\n    var left = -ctm.e % 1;\n    var top = -ctm.f % 1;\n    var style = element.style;\n\n    if (left !== 0 || top !== 0) {\n      style.left = left + \"px\";\n      style.top = top + \"px\";\n    }\n  }\n}\n\nvar Surface = function (BaseSurface) {\n  function Surface(element, options) {\n    BaseSurface.call(this, element, options);\n    this._root = new RootNode(Object.assign({\n      rtl: elementStyles(element, 'direction').direction === RTL\n    }, this.options));\n    renderSVG(this.element, this._template(''));\n    this._rootElement = this.element.firstElementChild;\n    this._rootElement.style.width = '100%';\n    this._rootElement.style.height = '100%';\n    this._rootElement.style.overflow = 'hidden';\n    alignToScreen(this._rootElement);\n\n    this._root.attachTo(this._rootElement);\n\n    bindEvents(this.element, {\n      click: this._click,\n      mouseover: this._mouseenter,\n      mouseout: this._mouseleave,\n      mousemove: this._mousemove\n    });\n    this.resize();\n  }\n\n  if (BaseSurface) Surface.__proto__ = BaseSurface;\n  Surface.prototype = Object.create(BaseSurface && BaseSurface.prototype);\n  Surface.prototype.constructor = Surface;\n  var prototypeAccessors = {\n    type: {\n      configurable: true\n    }\n  };\n\n  prototypeAccessors.type.get = function () {\n    return \"svg\";\n  };\n\n  Surface.prototype.destroy = function destroy() {\n    if (this._root) {\n      this._root.destroy();\n\n      this._root = null;\n      this._rootElement = null;\n      unbindEvents(this.element, {\n        click: this._click,\n        mouseover: this._mouseenter,\n        mouseout: this._mouseleave,\n        mousemove: this._mousemove\n      });\n    }\n\n    BaseSurface.prototype.destroy.call(this);\n  };\n\n  Surface.prototype.translate = function translate(offset) {\n    var viewBox = Math.round(offset.x) + \" \" + Math.round(offset.y) + \" \" + this._size.width + \" \" + this._size.height;\n\n    this._offset = offset;\n\n    this._rootElement.setAttribute(\"viewBox\", viewBox);\n  };\n\n  Surface.prototype.draw = function draw(element) {\n    BaseSurface.prototype.draw.call(this, element);\n\n    this._root.load([element]);\n  };\n\n  Surface.prototype.clear = function clear() {\n    BaseSurface.prototype.clear.call(this);\n\n    this._root.clear();\n  };\n\n  Surface.prototype.svg = function svg() {\n    return \"<?xml version='1.0' ?>\" + this._template();\n  };\n\n  Surface.prototype.exportVisual = function exportVisual() {\n    var ref = this;\n    var visual = ref._visual;\n    var offset = ref._offset;\n\n    if (offset) {\n      var wrap = new Group();\n      wrap.children.push(visual);\n      wrap.transform(transform().translate(-offset.x, -offset.y));\n      visual = wrap;\n    }\n\n    return visual;\n  };\n\n  Surface.prototype._resize = function _resize() {\n    if (this._offset) {\n      this.translate(this._offset);\n    }\n  };\n\n  Surface.prototype._template = function _template(svgStyles) {\n    var styles = typeof svgStyles === 'string' ? svgStyles : \"style='width: 100%; height: 100%; overflow: hidden;' \";\n    return \"<svg \" + styles + \"xmlns='\" + SVG_NS + \"' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>\" + this._root.render() + \"</svg>\";\n  };\n\n  Object.defineProperties(Surface.prototype, prototypeAccessors);\n  return Surface;\n}(BaseSurface);\n\nexport default Surface;","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-drawing/dist/es/svg/surface.js"],"names":["BaseSurface","RootNode","Group","transform","renderSVG","SVG_NS","bindEvents","unbindEvents","elementStyles","ArcNode","CircleNode","GroupNode","ImageNode","MultiPathNode","PathNode","RectNode","TextNode","NODE_MAP","Arc","Circle","Image","MultiPath","Path","Rect","Text","RTL","alignToScreen","element","ctm","getScreenCTM","e","left","top","f","style","Surface","options","call","_root","Object","assign","rtl","direction","_template","_rootElement","firstElementChild","width","height","overflow","attachTo","click","_click","mouseover","_mouseenter","mouseout","_mouseleave","mousemove","_mousemove","resize","__proto__","prototype","create","constructor","prototypeAccessors","type","configurable","get","destroy","translate","offset","viewBox","Math","round","x","y","_size","_offset","setAttribute","draw","load","clear","svg","exportVisual","ref","visual","_visual","wrap","children","push","_resize","svgStyles","styles","render","defineProperties"],"mappings":"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","sourcesContent":["import BaseSurface from '../core/surface';\r\nimport RootNode from './root-node';\r\nimport Group from '../shapes/group';\r\nimport transform from '../geometry/transform';\r\nimport renderSVG from './utils/render-svg';\r\nimport { SVG_NS } from './constants';\r\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\r\n\r\nimport ArcNode from './arc-node';\r\nimport CircleNode from './circle-node';\r\nimport GroupNode from './group-node';\r\nimport ImageNode from './image-node';\r\nimport MultiPathNode from './multi-path-node';\r\nimport PathNode from './path-node';\r\nimport RectNode from './rect-node';\r\nimport TextNode from './text-node';\r\nimport NODE_MAP from './node-map';\r\n\r\nNODE_MAP.Arc = ArcNode;\r\nNODE_MAP.Circle = CircleNode;\r\nNODE_MAP.Group = GroupNode;\r\nNODE_MAP.Image = ImageNode;\r\nNODE_MAP.MultiPath = MultiPathNode;\r\nNODE_MAP.Path = PathNode;\r\nNODE_MAP.Rect = RectNode;\r\nNODE_MAP.Text = TextNode;\r\n\r\nvar RTL = 'rtl';\r\n\r\nfunction alignToScreen(element) {\r\n    var ctm;\r\n\r\n    try {\r\n        ctm = element.getScreenCTM ? element.getScreenCTM() : null;\r\n    } catch (e) { } // eslint-disable-line no-empty\r\n\r\n    if (ctm) {\r\n        var left = - ctm.e % 1;\r\n        var top = - ctm.f % 1;\r\n        var style = element.style;\r\n\r\n        if (left !== 0 || top !== 0) {\r\n            style.left = left + \"px\";\r\n            style.top = top + \"px\";\r\n        }\r\n    }\r\n}\r\n\r\nvar Surface = (function (BaseSurface) {\r\n    function Surface(element, options) {\r\n        BaseSurface.call(this, element, options);\r\n\r\n        this._root = new RootNode(Object.assign({\r\n            rtl: elementStyles(element, 'direction').direction === RTL\r\n        }, this.options));\r\n\r\n        renderSVG(this.element, this._template(''));\r\n\r\n        this._rootElement = this.element.firstElementChild;\r\n        this._rootElement.style.width = '100%';\r\n        this._rootElement.style.height = '100%';\r\n        this._rootElement.style.overflow = 'hidden';\r\n\r\n        alignToScreen(this._rootElement);\r\n\r\n        this._root.attachTo(this._rootElement);\r\n\r\n        bindEvents(this.element, {\r\n            click: this._click,\r\n            mouseover: this._mouseenter,\r\n            mouseout: this._mouseleave,\r\n            mousemove: this._mousemove\r\n        });\r\n\r\n        this.resize();\r\n    }\r\n\r\n    if ( BaseSurface ) Surface.__proto__ = BaseSurface;\r\n    Surface.prototype = Object.create( BaseSurface && BaseSurface.prototype );\r\n    Surface.prototype.constructor = Surface;\r\n\r\n    var prototypeAccessors = { type: { configurable: true } };\r\n\r\n    prototypeAccessors.type.get = function () {\r\n        return \"svg\";\r\n    };\r\n\r\n    Surface.prototype.destroy = function destroy () {\r\n        if (this._root) {\r\n            this._root.destroy();\r\n            this._root = null;\r\n            this._rootElement = null;\r\n            unbindEvents(this.element, {\r\n                click: this._click,\r\n                mouseover: this._mouseenter,\r\n                mouseout: this._mouseleave,\r\n                mousemove: this._mousemove\r\n            });\r\n        }\r\n\r\n        BaseSurface.prototype.destroy.call(this);\r\n    };\r\n\r\n    Surface.prototype.translate = function translate (offset) {\r\n        var viewBox = (Math.round(offset.x)) + \" \" + (Math.round(offset.y)) + \" \" + (this._size.width) + \" \" + (this._size.height);\r\n\r\n        this._offset = offset;\r\n        this._rootElement.setAttribute(\"viewBox\", viewBox);\r\n    };\r\n\r\n    Surface.prototype.draw = function draw (element) {\r\n        BaseSurface.prototype.draw.call(this, element);\r\n        this._root.load([ element ]);\r\n    };\r\n\r\n    Surface.prototype.clear = function clear () {\r\n        BaseSurface.prototype.clear.call(this);\r\n        this._root.clear();\r\n    };\r\n\r\n    Surface.prototype.svg = function svg () {\r\n        return \"<?xml version='1.0' ?>\" + this._template();\r\n    };\r\n\r\n    Surface.prototype.exportVisual = function exportVisual () {\r\n        var ref = this;\r\n        var visual = ref._visual;\r\n        var offset = ref._offset;\r\n\r\n        if (offset) {\r\n            var wrap = new Group();\r\n            wrap.children.push(visual);\r\n\r\n            wrap.transform(\r\n                transform().translate(-offset.x, -offset.y)\r\n            );\r\n\r\n            visual = wrap;\r\n        }\r\n\r\n        return visual;\r\n    };\r\n\r\n    Surface.prototype._resize = function _resize () {\r\n        if (this._offset) {\r\n            this.translate(this._offset);\r\n        }\r\n    };\r\n\r\n    Surface.prototype._template = function _template (svgStyles) {\r\n        var styles = typeof svgStyles === 'string' ? svgStyles :\r\n            \"style='width: 100%; height: 100%; overflow: hidden;' \";\r\n        return (\"<svg \" + styles + \"xmlns='\" + SVG_NS + \"' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>\" + (this._root.render()) + \"</svg>\");\r\n    };\r\n\r\n    Object.defineProperties( Surface.prototype, prototypeAccessors );\r\n\r\n    return Surface;\r\n}(BaseSurface));\r\n\r\nexport default Surface;\r\n"]},"metadata":{},"sourceType":"module"}