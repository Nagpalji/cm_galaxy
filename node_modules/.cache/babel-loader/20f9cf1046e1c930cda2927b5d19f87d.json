{"ast":null,"code":"import PieSegment from '../pie-chart/pie-segment';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport { PIE } from '../constants';\nimport { ShapeBuilder, Box } from '../../core';\nimport { CENTER } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nvar DonutSegment = function (PieSegment) {\n  function DonutSegment() {\n    PieSegment.apply(this, arguments);\n  }\n\n  if (PieSegment) DonutSegment.__proto__ = PieSegment;\n  DonutSegment.prototype = Object.create(PieSegment && PieSegment.prototype);\n  DonutSegment.prototype.constructor = DonutSegment;\n\n  DonutSegment.prototype.reflowLabel = function reflowLabel() {\n    var ref = this;\n    var labelsOptions = ref.options.labels;\n    var label = ref.label;\n    var sector = this.sector.clone();\n    var angle = sector.middle();\n\n    if (label) {\n      var labelHeight = label.box.height();\n\n      if (labelsOptions.position === CENTER) {\n        sector.radius -= (sector.radius - sector.innerRadius) / 2;\n        var lp = sector.point(angle);\n        label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\n      } else {\n        PieSegment.prototype.reflowLabel.call(this);\n      }\n    }\n  };\n\n  DonutSegment.prototype.createSegment = function createSegment(sector, options) {\n    return ShapeBuilder.current.createRing(sector, options);\n  };\n\n  return DonutSegment;\n}(PieSegment);\n\nsetDefaultOptions(DonutSegment, {\n  overlay: {\n    gradient: \"roundedGlass\"\n  },\n  labels: {\n    position: CENTER\n  },\n  animation: {\n    type: PIE\n  }\n});\ndeepExtend(DonutSegment.prototype, PointEventsMixin);\nexport default DonutSegment;","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-charts/dist/es/chart/donut-chart/donut-segment.js"],"names":["PieSegment","PointEventsMixin","PIE","ShapeBuilder","Box","CENTER","deepExtend","setDefaultOptions","DonutSegment","apply","arguments","__proto__","prototype","Object","create","constructor","reflowLabel","ref","labelsOptions","options","labels","label","sector","clone","angle","middle","labelHeight","box","height","position","radius","innerRadius","lp","point","reflow","x","y","call","createSegment","current","createRing","overlay","gradient","animation","type"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,SAASC,GAAT,QAAoB,cAApB;AAEA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,YAAlC;AAEA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,cAA9C;;AAEA,IAAIC,YAAY,GAAI,UAAUR,UAAV,EAAsB;AACtC,WAASQ,YAAT,GAAyB;AACrBR,IAAAA,UAAU,CAACS,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB;AACH;;AAED,MAAKV,UAAL,EAAkBQ,YAAY,CAACG,SAAb,GAAyBX,UAAzB;AAClBQ,EAAAA,YAAY,CAACI,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAed,UAAU,IAAIA,UAAU,CAACY,SAAxC,CAAzB;AACAJ,EAAAA,YAAY,CAACI,SAAb,CAAuBG,WAAvB,GAAqCP,YAArC;;AAEAA,EAAAA,YAAY,CAACI,SAAb,CAAuBI,WAAvB,GAAqC,SAASA,WAAT,GAAwB;AACzD,QAAIC,GAAG,GAAG,IAAV;AACA,QAAIC,aAAa,GAAGD,GAAG,CAACE,OAAJ,CAAYC,MAAhC;AACA,QAAIC,KAAK,GAAGJ,GAAG,CAACI,KAAhB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAL,CAAYC,KAAZ,EAAb;AACA,QAAIC,KAAK,GAAGF,MAAM,CAACG,MAAP,EAAZ;;AAEA,QAAIJ,KAAJ,EAAW;AACP,UAAIK,WAAW,GAAGL,KAAK,CAACM,GAAN,CAAUC,MAAV,EAAlB;;AACA,UAAIV,aAAa,CAACW,QAAd,KAA2BxB,MAA/B,EAAuC;AACnCiB,QAAAA,MAAM,CAACQ,MAAP,IAAiB,CAACR,MAAM,CAACQ,MAAP,GAAgBR,MAAM,CAACS,WAAxB,IAAuC,CAAxD;AAEA,YAAIC,EAAE,GAAGV,MAAM,CAACW,KAAP,CAAaT,KAAb,CAAT;AAEAH,QAAAA,KAAK,CAACa,MAAN,CAAa,IAAI9B,GAAJ,CAAQ4B,EAAE,CAACG,CAAX,EAAcH,EAAE,CAACI,CAAH,GAAOV,WAAW,GAAG,CAAnC,EAAsCM,EAAE,CAACG,CAAzC,EAA4CH,EAAE,CAACI,CAA/C,CAAb;AACH,OAND,MAMO;AACHpC,QAAAA,UAAU,CAACY,SAAX,CAAqBI,WAArB,CAAiCqB,IAAjC,CAAsC,IAAtC;AACH;AACJ;AACJ,GAnBD;;AAqBA7B,EAAAA,YAAY,CAACI,SAAb,CAAuB0B,aAAvB,GAAuC,SAASA,aAAT,CAAwBhB,MAAxB,EAAgCH,OAAhC,EAAyC;AAC5E,WAAOhB,YAAY,CAACoC,OAAb,CAAqBC,UAArB,CAAgClB,MAAhC,EAAwCH,OAAxC,CAAP;AACH,GAFD;;AAIA,SAAOX,YAAP;AACH,CAnCmB,CAmClBR,UAnCkB,CAApB;;AAqCAO,iBAAiB,CAACC,YAAD,EAAe;AAC5BiC,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GADmB;AAI5BtB,EAAAA,MAAM,EAAE;AACJS,IAAAA,QAAQ,EAAExB;AADN,GAJoB;AAO5BsC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE1C;AADC;AAPiB,CAAf,CAAjB;AAYAI,UAAU,CAACE,YAAY,CAACI,SAAd,EAAyBX,gBAAzB,CAAV;AAGA,eAAeO,YAAf","sourcesContent":["import PieSegment from '../pie-chart/pie-segment';\r\nimport PointEventsMixin from '../mixins/point-events-mixin';\r\n\r\nimport { PIE } from '../constants';\r\n\r\nimport { ShapeBuilder, Box } from '../../core';\r\n\r\nimport { CENTER } from '../../common/constants';\r\nimport { deepExtend, setDefaultOptions } from '../../common';\r\n\r\nvar DonutSegment = (function (PieSegment) {\r\n    function DonutSegment () {\r\n        PieSegment.apply(this, arguments);\r\n    }\r\n\r\n    if ( PieSegment ) DonutSegment.__proto__ = PieSegment;\r\n    DonutSegment.prototype = Object.create( PieSegment && PieSegment.prototype );\r\n    DonutSegment.prototype.constructor = DonutSegment;\r\n\r\n    DonutSegment.prototype.reflowLabel = function reflowLabel () {\r\n        var ref = this;\r\n        var labelsOptions = ref.options.labels;\r\n        var label = ref.label;\r\n        var sector = this.sector.clone();\r\n        var angle = sector.middle();\r\n\r\n        if (label) {\r\n            var labelHeight = label.box.height();\r\n            if (labelsOptions.position === CENTER) {\r\n                sector.radius -= (sector.radius - sector.innerRadius) / 2;\r\n\r\n                var lp = sector.point(angle);\r\n\r\n                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\r\n            } else {\r\n                PieSegment.prototype.reflowLabel.call(this);\r\n            }\r\n        }\r\n    };\r\n\r\n    DonutSegment.prototype.createSegment = function createSegment (sector, options) {\r\n        return ShapeBuilder.current.createRing(sector, options);\r\n    };\r\n\r\n    return DonutSegment;\r\n}(PieSegment));\r\n\r\nsetDefaultOptions(DonutSegment, {\r\n    overlay: {\r\n        gradient: \"roundedGlass\"\r\n    },\r\n    labels: {\r\n        position: CENTER\r\n    },\r\n    animation: {\r\n        type: PIE\r\n    }\r\n});\r\n\r\ndeepExtend(DonutSegment.prototype, PointEventsMixin);\r\n\r\n\r\nexport default DonutSegment;\r\n"]},"metadata":{},"sourceType":"module"}