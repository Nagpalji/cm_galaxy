{"ast":null,"code":"import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\r\n * @hidden\r\n *\r\n * Returns the hex or RGBA string representation of the color.\r\n */\n\nexport var parseColor = function parseColor(value, format, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n  // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n\n  if (allowedFormats.indexOf(format) === -1) {\n    throw new Error(\"Unsupported color output format '\".concat(format, \"'. The available options are 'hex' or 'rgba'.\"));\n  }\n\n  if (!isPresent(value)) {\n    return;\n  }\n\n  var parsedColor = parse(value.trim(), safe);\n\n  if (!isPresent(parsedColor)) {\n    return;\n  }\n\n  return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\r\n * @hidden\r\n *\r\n * Returns an HSV object representation of the color string.\r\n */\n\nexport var getHSV = function getHSV(value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toHSV();\n};\n/**\r\n * @hidden\r\n *\r\n * Returns an RGBA object representation of the color string.\r\n */\n\nexport var getRGBA = function getRGBA(value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toBytes();\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color.\r\n */\n\nexport var getColorFromHSV = function getColorFromHSV(hsva) {\n  var hue = fitIntoBounds(hsva.h, 0, 359.9);\n  var saturation = fitIntoBounds(hsva.s, 0, 1);\n  var value = fitIntoBounds(hsva.v, 0, 1);\n  var alpha = fitIntoBounds(hsva.a, 0, 1);\n  return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color based on the `hue` and\r\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\r\n */\n\nexport var getColorFromHue = function getColorFromHue(hue) {\n  return getColorFromHSV({\n    h: hue,\n    s: 1,\n    v: 1,\n    a: 1\n  });\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color.\r\n */\n\nexport var getColorFromRGBA = function getColorFromRGBA(rgba) {\n  var red = fitIntoBounds(rgba.r, 0, 255);\n  var green = fitIntoBounds(rgba.g, 0, 255);\n  var blue = fitIntoBounds(rgba.b, 0, 255);\n  var alpha = fitIntoBounds(rgba.a, 0, 1);\n  return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the RGB object representation of the color based on the background color.\r\n */\n\nexport var getRGBFromRGBA = function getRGBFromRGBA(foregroundColor, backgroundColor) {\n  var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\n  var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\n  var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\n  var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\n  var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\n  var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\n  var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\n  return {\n    r: Math.round((1 - a1) * r2 + a1 * r1),\n    g: Math.round((1 - a1) * g2 + a1 * g1),\n    b: Math.round((1 - a1) * b2 + a1 * b1)\n  };\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the relative luminance.\r\n */\n\nexport var getLuminance = function getLuminance(rgb) {\n  var a = [rgb.r || 0, rgb.g || 0, rgb.b || 0].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the color contrast.\r\n */\n\nexport var getContrast = function getContrast(luminance1, luminance2) {\n  var brightest = Math.max(luminance1, luminance2);\n  var darkest = Math.min(luminance1, luminance2);\n  return (brightest + 0.05) / (darkest + 0.05);\n};\n/**\r\n * @hidden\r\n *\r\n * Returns the color contrast from two RGBA colors.\r\n */\n\nexport var getContrastFromTwoRGBAs = function getContrastFromTwoRGBAs(a, b) {\n  return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  })));\n};","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-react-inputs/dist/es/colors/utils/color-parser.js"],"names":["parseColor","parse","Color","isPresent","fitIntoBounds","value","format","safe","allowedFormats","indexOf","Error","concat","parsedColor","trim","toCss","toCssRgba","getHSV","parsed","toHSV","getRGBA","toBytes","getColorFromHSV","hsva","hue","h","saturation","s","v","alpha","a","fromHSV","getColorFromHue","getColorFromRGBA","rgba","red","r","green","g","blue","b","fromBytes","getRGBFromRGBA","foregroundColor","backgroundColor","r1","g1","b1","a1","r2","g2","b2","Math","round","getLuminance","rgb","map","pow","getContrast","luminance1","luminance2","brightest","max","darkest","min","getContrastFromTwoRGBAs"],"mappings":"AAAA,SAASA,UAAU,IAAIC,KAAvB,EAA8BC,KAA9B,QAA2C,yBAA3C;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,QAAzC;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIJ,UAAU,GAAG,SAAbA,UAAa,CAAUK,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AACnD,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIC,cAAc,GAAG,CAAC,KAAD,EAAQ,MAAR,CAArB,CAFmD,CAEb;AACtC;;AACA,MAAIA,cAAc,CAACC,OAAf,CAAuBH,MAAvB,MAAmC,CAAC,CAAxC,EAA2C;AACvC,UAAM,IAAII,KAAJ,CAAU,oCAAoCC,MAApC,CAA2CL,MAA3C,EAAmD,+CAAnD,CAAV,CAAN;AACH;;AACD,MAAI,CAACH,SAAS,CAACE,KAAD,CAAd,EAAuB;AACnB;AACH;;AACD,MAAIO,WAAW,GAAGX,KAAK,CAACI,KAAK,CAACQ,IAAN,EAAD,EAAeN,IAAf,CAAvB;;AACA,MAAI,CAACJ,SAAS,CAACS,WAAD,CAAd,EAA6B;AACzB;AACH;;AACD,SAAON,MAAM,KAAK,KAAX,GAAmBM,WAAW,CAACE,KAAZ,EAAnB,GAAyCF,WAAW,CAACG,SAAZ,EAAhD;AACH,CAfM;AAgBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,MAAM,GAAG,SAATA,MAAS,CAAUX,KAAV,EAAiBE,IAAjB,EAAuB;AACvC,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIU,MAAM,GAAGhB,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAlB;;AACA,MAAI,CAACJ,SAAS,CAACc,MAAD,CAAd,EAAwB;AACpB,WAAO,EAAP;AACH;;AACD,SAAOA,MAAM,CAACC,KAAP,EAAP;AACH,CAPM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,OAAO,GAAG,SAAVA,OAAU,CAAUd,KAAV,EAAiBE,IAAjB,EAAuB;AACxC,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,MAAIU,MAAM,GAAGhB,KAAK,CAACI,KAAD,EAAQE,IAAR,CAAlB;;AACA,MAAI,CAACJ,SAAS,CAACc,MAAD,CAAd,EAAwB;AACpB,WAAO,EAAP;AACH;;AACD,SAAOA,MAAM,CAACG,OAAP,EAAP;AACH,CAPM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,IAAV,EAAgB;AACzC,MAAIC,GAAG,GAAGnB,aAAa,CAACkB,IAAI,CAACE,CAAN,EAAS,CAAT,EAAY,KAAZ,CAAvB;AACA,MAAIC,UAAU,GAAGrB,aAAa,CAACkB,IAAI,CAACI,CAAN,EAAS,CAAT,EAAY,CAAZ,CAA9B;AACA,MAAIrB,KAAK,GAAGD,aAAa,CAACkB,IAAI,CAACK,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAzB;AACA,MAAIC,KAAK,GAAGxB,aAAa,CAACkB,IAAI,CAACO,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAzB;AACA,SAAO3B,KAAK,CAAC4B,OAAN,CAAcP,GAAd,EAAmBE,UAAnB,EAA+BpB,KAA/B,EAAsCuB,KAAtC,EAA6Cb,SAA7C,EAAP;AACH,CANM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgB,eAAe,GAAG,SAAlBA,eAAkB,CAAUR,GAAV,EAAe;AACxC,SAAOF,eAAe,CAAC;AAAEG,IAAAA,CAAC,EAAED,GAAL;AAAUG,IAAAA,CAAC,EAAE,CAAb;AAAgBC,IAAAA,CAAC,EAAE,CAAnB;AAAsBE,IAAAA,CAAC,EAAE;AAAzB,GAAD,CAAtB;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,IAAV,EAAgB;AAC1C,MAAIC,GAAG,GAAG9B,aAAa,CAAC6B,IAAI,CAACE,CAAN,EAAS,CAAT,EAAY,GAAZ,CAAvB;AACA,MAAIC,KAAK,GAAGhC,aAAa,CAAC6B,IAAI,CAACI,CAAN,EAAS,CAAT,EAAY,GAAZ,CAAzB;AACA,MAAIC,IAAI,GAAGlC,aAAa,CAAC6B,IAAI,CAACM,CAAN,EAAS,CAAT,EAAY,GAAZ,CAAxB;AACA,MAAIX,KAAK,GAAGxB,aAAa,CAAC6B,IAAI,CAACJ,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAzB;AACA,SAAO3B,KAAK,CAACsC,SAAN,CAAgBN,GAAhB,EAAqBE,KAArB,EAA4BE,IAA5B,EAAkCV,KAAlC,EAAyCb,SAAzC,EAAP;AACH,CANM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI0B,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,eAAV,EAA2BC,eAA3B,EAA4C;AACpE,MAAIC,EAAE,GAAGxC,aAAa,CAACsC,eAAe,CAACP,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,MAAIU,EAAE,GAAGzC,aAAa,CAACsC,eAAe,CAACL,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,MAAIS,EAAE,GAAG1C,aAAa,CAACsC,eAAe,CAACH,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,MAAIQ,EAAE,GAAG3C,aAAa,CAACsC,eAAe,CAACb,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAtB;AACA,MAAImB,EAAE,GAAG5C,aAAa,CAACuC,eAAe,CAACR,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,MAAIc,EAAE,GAAG7C,aAAa,CAACuC,eAAe,CAACN,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,MAAIa,EAAE,GAAG9C,aAAa,CAACuC,eAAe,CAACJ,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,CAAtB;AACA,SAAO;AACHJ,IAAAA,CAAC,EAAEgB,IAAI,CAACC,KAAL,CAAY,CAAC,IAAIL,EAAL,IAAWC,EAAZ,GAAmBD,EAAE,GAAGH,EAAnC,CADA;AAEHP,IAAAA,CAAC,EAAEc,IAAI,CAACC,KAAL,CAAY,CAAC,IAAIL,EAAL,IAAWE,EAAZ,GAAmBF,EAAE,GAAGF,EAAnC,CAFA;AAGHN,IAAAA,CAAC,EAAEY,IAAI,CAACC,KAAL,CAAY,CAAC,IAAIL,EAAL,IAAWG,EAAZ,GAAmBH,EAAE,GAAGD,EAAnC;AAHA,GAAP;AAKH,CAbM;AAcP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIO,YAAY,GAAG,SAAfA,YAAe,CAAUC,GAAV,EAAe;AACrC,MAAIzB,CAAC,GAAG,CAACyB,GAAG,CAACnB,CAAJ,IAAS,CAAV,EAAamB,GAAG,CAACjB,CAAJ,IAAS,CAAtB,EAAyBiB,GAAG,CAACf,CAAJ,IAAS,CAAlC,EAAqCgB,GAArC,CAAyC,UAAU5B,CAAV,EAAa;AAC1DA,IAAAA,CAAC,IAAI,GAAL;AACA,WAAOA,CAAC,IAAI,OAAL,GACDA,CAAC,GAAG,KADH,GAEDwB,IAAI,CAACK,GAAL,CAAS,CAAC7B,CAAC,GAAG,KAAL,IAAc,KAAvB,EAA8B,GAA9B,CAFN;AAGH,GALO,CAAR;AAMA,SAAOE,CAAC,CAAC,CAAD,CAAD,GAAO,MAAP,GAAgBA,CAAC,CAAC,CAAD,CAAD,GAAO,MAAvB,GAAgCA,CAAC,CAAC,CAAD,CAAD,GAAO,MAA9C;AACH,CARM;AASP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI4B,WAAW,GAAG,SAAdA,WAAc,CAAUC,UAAV,EAAsBC,UAAtB,EAAkC;AACvD,MAAIC,SAAS,GAAGT,IAAI,CAACU,GAAL,CAASH,UAAT,EAAqBC,UAArB,CAAhB;AACA,MAAIG,OAAO,GAAGX,IAAI,CAACY,GAAL,CAASL,UAAT,EAAqBC,UAArB,CAAd;AACA,SAAO,CAACC,SAAS,GAAG,IAAb,KACAE,OAAO,GAAG,IADV,CAAP;AAEH,CALM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAUnC,CAAV,EAAaU,CAAb,EAAgB;AACjD,SAAOkB,WAAW,CAACJ,YAAY,CAACZ,cAAc,CAACZ,CAAD,EAAIU,CAAJ,CAAf,CAAb,EAAqCc,YAAY,CAACZ,cAAc,CAACF,CAAD,EAAI;AAAEJ,IAAAA,CAAC,EAAE,CAAL;AAAQE,IAAAA,CAAC,EAAE,CAAX;AAAcE,IAAAA,CAAC,EAAE,CAAjB;AAAoBV,IAAAA,CAAC,EAAE;AAAvB,GAAJ,CAAf,CAAjD,CAAlB;AACH,CAFM","sourcesContent":["import { parseColor as parse, Color } from '@progress/kendo-drawing';\r\nimport { isPresent, fitIntoBounds } from './misc';\r\n/**\r\n * @hidden\r\n *\r\n * Returns the hex or RGBA string representation of the color.\r\n */\r\nexport var parseColor = function (value, format, safe) {\r\n    if (safe === void 0) { safe = true; }\r\n    var allowedFormats = ['hex', 'rgba']; // TODO: constant?\r\n    // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\r\n    if (allowedFormats.indexOf(format) === -1) {\r\n        throw new Error(\"Unsupported color output format '\".concat(format, \"'. The available options are 'hex' or 'rgba'.\"));\r\n    }\r\n    if (!isPresent(value)) {\r\n        return;\r\n    }\r\n    var parsedColor = parse(value.trim(), safe);\r\n    if (!isPresent(parsedColor)) {\r\n        return;\r\n    }\r\n    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns an HSV object representation of the color string.\r\n */\r\nexport var getHSV = function (value, safe) {\r\n    if (safe === void 0) { safe = true; }\r\n    var parsed = parse(value, safe);\r\n    if (!isPresent(parsed)) {\r\n        return {};\r\n    }\r\n    return parsed.toHSV();\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns an RGBA object representation of the color string.\r\n */\r\nexport var getRGBA = function (value, safe) {\r\n    if (safe === void 0) { safe = true; }\r\n    var parsed = parse(value, safe);\r\n    if (!isPresent(parsed)) {\r\n        return {};\r\n    }\r\n    return parsed.toBytes();\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color.\r\n */\r\nexport var getColorFromHSV = function (hsva) {\r\n    var hue = fitIntoBounds(hsva.h, 0, 359.9);\r\n    var saturation = fitIntoBounds(hsva.s, 0, 1);\r\n    var value = fitIntoBounds(hsva.v, 0, 1);\r\n    var alpha = fitIntoBounds(hsva.a, 0, 1);\r\n    return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color based on the `hue` and\r\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\r\n */\r\nexport var getColorFromHue = function (hue) {\r\n    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the RGBA string representation of the color.\r\n */\r\nexport var getColorFromRGBA = function (rgba) {\r\n    var red = fitIntoBounds(rgba.r, 0, 255);\r\n    var green = fitIntoBounds(rgba.g, 0, 255);\r\n    var blue = fitIntoBounds(rgba.b, 0, 255);\r\n    var alpha = fitIntoBounds(rgba.a, 0, 1);\r\n    return Color.fromBytes(red, green, blue, alpha).toCssRgba();\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the RGB object representation of the color based on the background color.\r\n */\r\nexport var getRGBFromRGBA = function (foregroundColor, backgroundColor) {\r\n    var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\r\n    var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\r\n    var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\r\n    var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\r\n    var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\r\n    var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\r\n    var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\r\n    return {\r\n        r: Math.round(((1 - a1) * r2) + (a1 * r1)),\r\n        g: Math.round(((1 - a1) * g2) + (a1 * g1)),\r\n        b: Math.round(((1 - a1) * b2) + (a1 * b1))\r\n    };\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the relative luminance.\r\n */\r\nexport var getLuminance = function (rgb) {\r\n    var a = [rgb.r || 0, rgb.g || 0, rgb.b || 0].map(function (v) {\r\n        v /= 255;\r\n        return v <= 0.03928\r\n            ? v / 12.92\r\n            : Math.pow((v + 0.055) / 1.055, 2.4);\r\n    });\r\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the color contrast.\r\n */\r\nexport var getContrast = function (luminance1, luminance2) {\r\n    var brightest = Math.max(luminance1, luminance2);\r\n    var darkest = Math.min(luminance1, luminance2);\r\n    return (brightest + 0.05)\r\n        / (darkest + 0.05);\r\n};\r\n/**\r\n * @hidden\r\n *\r\n * Returns the color contrast from two RGBA colors.\r\n */\r\nexport var getContrastFromTwoRGBAs = function (a, b) {\r\n    return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}