{"ast":null,"code":"import RadialScale from '../radial/radial-scale';\nimport { setDefaultOptions } from '../../common';\n\nvar ArcScale = function (RadialScale) {\n  function ArcScale() {\n    RadialScale.apply(this, arguments);\n  }\n\n  if (RadialScale) ArcScale.__proto__ = RadialScale;\n  ArcScale.prototype = Object.create(RadialScale && RadialScale.prototype);\n  ArcScale.prototype.constructor = ArcScale;\n\n  ArcScale.prototype.rangeSegments = function rangeSegments() {\n    var ref = this.options;\n    var min = ref.min;\n    var max = ref.max;\n    var rangePlaceholderColor = ref.rangePlaceholderColor;\n    var rangeLineCap = ref.rangeLineCap;\n    return [{\n      from: min,\n      to: max,\n      color: rangePlaceholderColor,\n      lineCap: rangeLineCap\n    }];\n  };\n\n  ArcScale.prototype.hasRanges = function hasRanges() {\n    return true;\n  };\n\n  ArcScale.prototype.placeholderRangeAngle = function placeholderRangeAngle(angle) {\n    var geometry = this.ranges.children[0].geometry();\n\n    if (this.options.reverse) {\n      geometry.setEndAngle(angle);\n    } else {\n      geometry.setStartAngle(angle);\n    }\n  };\n\n  ArcScale.prototype.addRange = function addRange(from, to, options) {\n    var reverse = this.options.reverse;\n    var startAngle = this.slotAngle(reverse ? to : from);\n    var endAngle = this.slotAngle(reverse ? from : to);\n    var range = this.createRange(startAngle, endAngle, this.getRangeRadius(), options);\n    this.ranges.append(range);\n    return range;\n  };\n\n  return ArcScale;\n}(RadialScale);\n\nsetDefaultOptions(ArcScale, {\n  min: 0,\n  max: 100,\n  majorTicks: {\n    visible: false\n  },\n  minorTicks: {\n    visible: false\n  },\n  labels: {\n    visible: false\n  },\n  startAngle: 0,\n  endAngle: 180,\n  rangeLineCap: 'round'\n});\nexport default ArcScale;","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-charts/dist/es/gauges/arc/arc-scale.js"],"names":["RadialScale","setDefaultOptions","ArcScale","apply","arguments","__proto__","prototype","Object","create","constructor","rangeSegments","ref","options","min","max","rangePlaceholderColor","rangeLineCap","from","to","color","lineCap","hasRanges","placeholderRangeAngle","angle","geometry","ranges","children","reverse","setEndAngle","setStartAngle","addRange","startAngle","slotAngle","endAngle","range","createRange","getRangeRadius","append","majorTicks","visible","minorTicks","labels"],"mappings":"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","sourcesContent":["import RadialScale from '../radial/radial-scale';\r\nimport { setDefaultOptions } from '../../common';\r\n\r\nvar ArcScale = (function (RadialScale) {\r\n    function ArcScale () {\r\n        RadialScale.apply(this, arguments);\r\n    }\r\n\r\n    if ( RadialScale ) ArcScale.__proto__ = RadialScale;\r\n    ArcScale.prototype = Object.create( RadialScale && RadialScale.prototype );\r\n    ArcScale.prototype.constructor = ArcScale;\r\n\r\n    ArcScale.prototype.rangeSegments = function rangeSegments () {\r\n        var ref = this.options;\r\n        var min = ref.min;\r\n        var max = ref.max;\r\n        var rangePlaceholderColor = ref.rangePlaceholderColor;\r\n        var rangeLineCap = ref.rangeLineCap;\r\n\r\n        return [ { from: min, to: max, color: rangePlaceholderColor, lineCap: rangeLineCap } ];\r\n    };\r\n\r\n    ArcScale.prototype.hasRanges = function hasRanges () {\r\n        return true;\r\n    };\r\n\r\n    ArcScale.prototype.placeholderRangeAngle = function placeholderRangeAngle (angle) {\r\n        var geometry = this.ranges.children[0].geometry();\r\n\r\n        if (this.options.reverse) {\r\n            geometry.setEndAngle(angle);\r\n        } else {\r\n            geometry.setStartAngle(angle);\r\n        }\r\n    };\r\n\r\n    ArcScale.prototype.addRange = function addRange (from, to, options) {\r\n        var reverse = this.options.reverse;\r\n\r\n        var startAngle = this.slotAngle(reverse ? to : from);\r\n        var endAngle = this.slotAngle(reverse ? from : to);\r\n\r\n        var range = this.createRange(startAngle, endAngle, this.getRangeRadius(), options);\r\n\r\n        this.ranges.append(range);\r\n\r\n        return range;\r\n    };\r\n\r\n    return ArcScale;\r\n}(RadialScale));\r\n\r\nsetDefaultOptions(ArcScale, {\r\n    min: 0,\r\n    max: 100,\r\n\r\n    majorTicks: {\r\n        visible: false\r\n    },\r\n\r\n    minorTicks: {\r\n        visible: false\r\n    },\r\n\r\n    labels: {\r\n        visible: false\r\n    },\r\n\r\n    startAngle: 0,\r\n    endAngle: 180,\r\n    rangeLineCap: 'round'\r\n});\r\n\r\nexport default ArcScale;"]},"metadata":{},"sourceType":"module"}