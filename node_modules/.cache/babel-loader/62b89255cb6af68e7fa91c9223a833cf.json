{"ast":null,"code":"import { messages } from './messages';\n/**\r\n * A service which provides localization methods.\r\n */\n\nvar LocalizationService = function () {\n  function LocalizationService(language) {\n    this.language = language;\n\n    if (language === '' && process.env.NODE_ENV !== 'production') {\n      throw 'Language should not be an empty string';\n    }\n  }\n  /* eslint-disable max-len */\n\n  /**\r\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\r\n   *\r\n   * @param key - The key which identifies the string for the current language.\r\n   * @param defaultValue - The default value which will be returned when no string\r\n   * for the current language is available under the key.\r\n   * @return - The string for the current language.\r\n   */\n  // tslint:enable:max-line-length\n\n\n  LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n    if (this.language && messages[this.language] && messages[this.language].hasOwnProperty(key)) {\n      return messages[this.language][key];\n    } else {\n      return defaultValue;\n    }\n  };\n\n  return LocalizationService;\n}();\n\nexport { LocalizationService };","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-react-intl/dist/es/Localization/LocalizationService.js"],"names":["messages","LocalizationService","language","process","env","NODE_ENV","prototype","toLanguageString","key","defaultValue","hasOwnProperty"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAkB,YAAY;AACjD,WAASA,mBAAT,CAA6BC,QAA7B,EAAuC;AACnC,SAAKA,QAAL,GAAgBA,QAAhB;;AACA,QAAIA,QAAQ,KAAK,EAAb,IAAmBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAhD,EAA8D;AAC1D,YAAM,wCAAN;AACH;AACJ;AACD;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;;AACAJ,EAAAA,mBAAmB,CAACK,SAApB,CAA8BC,gBAA9B,GAAiD,UAAUC,GAAV,EAAeC,YAAf,EAA6B;AAC1E,QAAI,KAAKP,QAAL,IACAF,QAAQ,CAAC,KAAKE,QAAN,CADR,IAEAF,QAAQ,CAAC,KAAKE,QAAN,CAAR,CAAwBQ,cAAxB,CAAuCF,GAAvC,CAFJ,EAEiD;AAC7C,aAAOR,QAAQ,CAAC,KAAKE,QAAN,CAAR,CAAwBM,GAAxB,CAAP;AACH,KAJD,MAKK;AACD,aAAOC,YAAP;AACH;AACJ,GATD;;AAUA,SAAOR,mBAAP;AACH,CA5BwC,EAAzC;;AA6BA,SAASA,mBAAT","sourcesContent":["import { messages } from './messages';\r\n/**\r\n * A service which provides localization methods.\r\n */\r\nvar LocalizationService = /** @class */ (function () {\r\n    function LocalizationService(language) {\r\n        this.language = language;\r\n        if (language === '' && process.env.NODE_ENV !== 'production') {\r\n            throw 'Language should not be an empty string';\r\n        }\r\n    }\r\n    /* eslint-disable max-len */\r\n    /**\r\n     * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\r\n     *\r\n     * @param key - The key which identifies the string for the current language.\r\n     * @param defaultValue - The default value which will be returned when no string\r\n     * for the current language is available under the key.\r\n     * @return - The string for the current language.\r\n     */\r\n    // tslint:enable:max-line-length\r\n    LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\r\n        if (this.language &&\r\n            messages[this.language] &&\r\n            messages[this.language].hasOwnProperty(key)) {\r\n            return messages[this.language][key];\r\n        }\r\n        else {\r\n            return defaultValue;\r\n        }\r\n    };\r\n    return LocalizationService;\r\n}());\r\nexport { LocalizationService };\r\n"]},"metadata":{},"sourceType":"module"}