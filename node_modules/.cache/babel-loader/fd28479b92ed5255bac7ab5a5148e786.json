{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport GridLinesMixin from './mixins/grid-lines-mixin';\nimport RadarCategoryAxis from './radar-category-axis';\nimport NumericAxis from './numeric-axis';\nimport Axis from './axis';\nimport Ring from './ring';\nimport Box from './box';\nimport { BLACK } from '../common/constants';\nimport { deepExtend, deg, getSpacing, inArray, limitValue, setDefaultOptions } from '../common';\n\nvar PolarAxis = function (Axis) {\n  function PolarAxis(options, chartService) {\n    Axis.call(this, options, chartService);\n    var instanceOptions = this.options;\n    instanceOptions.minorUnit = instanceOptions.minorUnit || instanceOptions.majorUnit / 2;\n  }\n\n  if (Axis) PolarAxis.__proto__ = Axis;\n  PolarAxis.prototype = Object.create(Axis && Axis.prototype);\n  PolarAxis.prototype.constructor = PolarAxis;\n\n  PolarAxis.prototype.getDivisions = function getDivisions(stepValue) {\n    return NumericAxis.prototype.getDivisions.call(this, stepValue) - 1;\n  };\n\n  PolarAxis.prototype.reflow = function reflow(box) {\n    this.box = box;\n    this.reflowLabels();\n  };\n\n  PolarAxis.prototype.reflowLabels = function reflowLabels() {\n    var this$1 = this;\n    var ref = this;\n    var options = ref.options;\n    var labels = ref.labels;\n    var labelOptions = ref.options.labels;\n    var skip = labelOptions.skip || 0;\n    var step = labelOptions.step || 1;\n    var measureBox = new Box();\n    var divs = this.intervals(options.majorUnit, skip, step);\n\n    for (var i = 0; i < labels.length; i++) {\n      labels[i].reflow(measureBox);\n      var labelBox = labels[i].box;\n      labels[i].reflow(this$1.getSlot(divs[i]).adjacentBox(0, labelBox.width(), labelBox.height()));\n    }\n  };\n\n  PolarAxis.prototype.lineBox = function lineBox() {\n    return this.box;\n  };\n\n  PolarAxis.prototype.intervals = function intervals(size, skipOption, stepOption, skipAngles) {\n    if (skipAngles === void 0) skipAngles = false;\n    var min = this.options.min;\n    var divisions = this.getDivisions(size);\n    var divs = [];\n    var skip = skipOption || 0;\n    var step = stepOption || 1;\n\n    for (var i = skip; i < divisions; i += step) {\n      var current = (360 + min + i * size) % 360;\n\n      if (!(skipAngles && inArray(current, skipAngles))) {\n        divs.push(current);\n      }\n    }\n\n    return divs;\n  };\n\n  PolarAxis.prototype.majorIntervals = function majorIntervals() {\n    return this.intervals(this.options.majorUnit);\n  };\n\n  PolarAxis.prototype.minorIntervals = function minorIntervals() {\n    return this.intervals(this.options.minorUnit);\n  };\n\n  PolarAxis.prototype.intervalAngle = function intervalAngle(i) {\n    return (540 - i - this.options.startAngle) % 360;\n  };\n\n  PolarAxis.prototype.createLine = function createLine() {\n    return [];\n  };\n\n  PolarAxis.prototype.majorGridLineAngles = function majorGridLineAngles(altAxis) {\n    var majorGridLines = this.options.majorGridLines;\n    return this.gridLineAngles(altAxis, this.options.majorUnit, majorGridLines.skip, majorGridLines.step);\n  };\n\n  PolarAxis.prototype.minorGridLineAngles = function minorGridLineAngles(altAxis, skipMajor) {\n    var options = this.options;\n    var minorGridLines = options.minorGridLines;\n    var majorGridLines = options.majorGridLines;\n    var majorGridLineAngles = skipMajor ? this.intervals(options.majorUnit, majorGridLines.skip, majorGridLines.step) : null;\n    return this.gridLineAngles(altAxis, options.minorUnit, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);\n  };\n\n  PolarAxis.prototype.plotBandSlot = function plotBandSlot(band) {\n    return this.getSlot(band.from, band.to);\n  };\n\n  PolarAxis.prototype.getSlot = function getSlot(a, b) {\n    var ref = this;\n    var options = ref.options;\n    var box = ref.box;\n    var startAngle = options.startAngle;\n    var start = limitValue(a, options.min, options.max);\n    var end = limitValue(b || start, start, options.max);\n\n    if (options.reverse) {\n      start *= -1;\n      end *= -1;\n    }\n\n    start = (540 - start - startAngle) % 360;\n    end = (540 - end - startAngle) % 360;\n\n    if (end < start) {\n      var tmp = start;\n      start = end;\n      end = tmp;\n    }\n\n    return new Ring(box.center(), 0, box.height() / 2, start, end - start);\n  };\n\n  PolarAxis.prototype.slot = function slot(from, to) {\n    if (to === void 0) to = from;\n    var options = this.options;\n    var start = 360 - options.startAngle;\n    var slot = this.getSlot(from, to);\n    var min = Math.min(from, to);\n    var max = Math.max(from, to);\n    var startAngle, endAngle;\n\n    if (options.reverse) {\n      startAngle = min;\n      endAngle = max;\n    } else {\n      startAngle = 360 - max;\n      endAngle = 360 - min;\n    }\n\n    startAngle = (startAngle + start) % 360;\n    endAngle = (endAngle + start) % 360;\n    return new geom.Arc([slot.center.x, slot.center.y], {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radiusX: slot.radius,\n      radiusY: slot.radius\n    });\n  };\n\n  PolarAxis.prototype.getValue = function getValue(point) {\n    var options = this.options;\n    var center = this.box.center();\n    var dx = point.x - center.x;\n    var dy = point.y - center.y;\n    var theta = Math.round(deg(Math.atan2(dy, dx)));\n    var start = options.startAngle;\n\n    if (!options.reverse) {\n      theta *= -1;\n      start *= -1;\n    }\n\n    return (theta + start + 360) % 360;\n  };\n\n  PolarAxis.prototype.valueRange = function valueRange() {\n    return {\n      min: 0,\n      max: Math.PI * 2\n    };\n  };\n\n  return PolarAxis;\n}(Axis);\n\nsetDefaultOptions(PolarAxis, {\n  type: \"polar\",\n  startAngle: 0,\n  reverse: false,\n  majorUnit: 60,\n  min: 0,\n  max: 360,\n  labels: {\n    margin: getSpacing(10)\n  },\n  majorGridLines: {\n    color: BLACK,\n    visible: true,\n    width: 1\n  },\n  minorGridLines: {\n    color: \"#aaa\"\n  }\n});\ndeepExtend(PolarAxis.prototype, GridLinesMixin, {\n  createPlotBands: RadarCategoryAxis.prototype.createPlotBands,\n  majorAngles: RadarCategoryAxis.prototype.majorAngles,\n  range: NumericAxis.prototype.range,\n  labelsCount: NumericAxis.prototype.labelsCount,\n  createAxisLabel: NumericAxis.prototype.createAxisLabel\n});\nexport default PolarAxis;","map":{"version":3,"sources":["C:/Users/nsahi/OneDrive/Documents/cyber_media/cm_galaxy/node_modules/@progress/kendo-charts/dist/es/core/polar-axis.js"],"names":["geometry","geom","GridLinesMixin","RadarCategoryAxis","NumericAxis","Axis","Ring","Box","BLACK","deepExtend","deg","getSpacing","inArray","limitValue","setDefaultOptions","PolarAxis","options","chartService","call","instanceOptions","minorUnit","majorUnit","__proto__","prototype","Object","create","constructor","getDivisions","stepValue","reflow","box","reflowLabels","this$1","ref","labels","labelOptions","skip","step","measureBox","divs","intervals","i","length","labelBox","getSlot","adjacentBox","width","height","lineBox","size","skipOption","stepOption","skipAngles","min","divisions","current","push","majorIntervals","minorIntervals","intervalAngle","startAngle","createLine","majorGridLineAngles","altAxis","majorGridLines","gridLineAngles","minorGridLineAngles","skipMajor","minorGridLines","plotBandSlot","band","from","to","a","b","start","max","end","reverse","tmp","center","slot","Math","endAngle","Arc","x","y","radiusX","radius","radiusY","getValue","point","dx","dy","theta","round","atan2","valueRange","PI","type","margin","color","visible","createPlotBands","majorAngles","range","labelsCount","createAxisLabel"],"mappings":"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","sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\r\n\r\nimport GridLinesMixin from './mixins/grid-lines-mixin';\r\nimport RadarCategoryAxis from './radar-category-axis';\r\nimport NumericAxis from './numeric-axis';\r\nimport Axis from './axis';\r\nimport Ring from './ring';\r\nimport Box from './box';\r\n\r\nimport { BLACK } from '../common/constants';\r\nimport { deepExtend, deg, getSpacing, inArray, limitValue, setDefaultOptions } from '../common';\r\n\r\nvar PolarAxis = (function (Axis) {\r\n    function PolarAxis(options, chartService) {\r\n        Axis.call(this, options, chartService);\r\n\r\n        var instanceOptions = this.options;\r\n\r\n        instanceOptions.minorUnit = instanceOptions.minorUnit || instanceOptions.majorUnit / 2;\r\n    }\r\n\r\n    if ( Axis ) PolarAxis.__proto__ = Axis;\r\n    PolarAxis.prototype = Object.create( Axis && Axis.prototype );\r\n    PolarAxis.prototype.constructor = PolarAxis;\r\n\r\n    PolarAxis.prototype.getDivisions = function getDivisions (stepValue) {\r\n        return NumericAxis.prototype.getDivisions.call(this, stepValue) - 1;\r\n    };\r\n\r\n    PolarAxis.prototype.reflow = function reflow (box) {\r\n        this.box = box;\r\n        this.reflowLabels();\r\n    };\r\n\r\n    PolarAxis.prototype.reflowLabels = function reflowLabels () {\r\n        var this$1 = this;\r\n\r\n        var ref = this;\r\n        var options = ref.options;\r\n        var labels = ref.labels;\r\n        var labelOptions = ref.options.labels;\r\n        var skip = labelOptions.skip || 0;\r\n        var step = labelOptions.step || 1;\r\n\r\n        var measureBox = new Box();\r\n        var divs = this.intervals(options.majorUnit, skip, step);\r\n\r\n        for (var i = 0; i < labels.length; i++) {\r\n            labels[i].reflow(measureBox);\r\n            var labelBox = labels[i].box;\r\n\r\n            labels[i].reflow(this$1.getSlot(divs[i]).adjacentBox(0, labelBox.width(), labelBox.height()));\r\n        }\r\n    };\r\n\r\n    PolarAxis.prototype.lineBox = function lineBox () {\r\n        return this.box;\r\n    };\r\n\r\n    PolarAxis.prototype.intervals = function intervals (size, skipOption, stepOption, skipAngles) {\r\n        if ( skipAngles === void 0 ) skipAngles = false;\r\n\r\n        var min = this.options.min;\r\n        var divisions = this.getDivisions(size);\r\n        var divs = [];\r\n        var skip = skipOption || 0;\r\n        var step = stepOption || 1;\r\n\r\n        for (var i = skip; i < divisions; i += step) {\r\n            var current = (360 + min + i * size) % 360;\r\n            if (!(skipAngles && inArray(current, skipAngles))) {\r\n                divs.push(current);\r\n            }\r\n        }\r\n\r\n        return divs;\r\n    };\r\n\r\n    PolarAxis.prototype.majorIntervals = function majorIntervals () {\r\n        return this.intervals(this.options.majorUnit);\r\n    };\r\n\r\n    PolarAxis.prototype.minorIntervals = function minorIntervals () {\r\n        return this.intervals(this.options.minorUnit);\r\n    };\r\n\r\n    PolarAxis.prototype.intervalAngle = function intervalAngle (i) {\r\n        return (540 - i - this.options.startAngle) % 360;\r\n    };\r\n\r\n    PolarAxis.prototype.createLine = function createLine () {\r\n        return [];\r\n    };\r\n\r\n    PolarAxis.prototype.majorGridLineAngles = function majorGridLineAngles (altAxis) {\r\n        var majorGridLines = this.options.majorGridLines;\r\n        return this.gridLineAngles(altAxis, this.options.majorUnit, majorGridLines.skip, majorGridLines.step);\r\n    };\r\n\r\n    PolarAxis.prototype.minorGridLineAngles = function minorGridLineAngles (altAxis, skipMajor) {\r\n        var options = this.options;\r\n        var minorGridLines = options.minorGridLines;\r\n        var majorGridLines = options.majorGridLines;\r\n        var majorGridLineAngles = skipMajor ? this.intervals(options.majorUnit, majorGridLines.skip, majorGridLines.step) : null;\r\n\r\n        return this.gridLineAngles(altAxis, options.minorUnit, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);\r\n    };\r\n\r\n    PolarAxis.prototype.plotBandSlot = function plotBandSlot (band) {\r\n        return this.getSlot(band.from, band.to);\r\n    };\r\n\r\n    PolarAxis.prototype.getSlot = function getSlot (a, b) {\r\n        var ref = this;\r\n        var options = ref.options;\r\n        var box = ref.box;\r\n        var startAngle = options.startAngle;\r\n        var start = limitValue(a, options.min, options.max);\r\n        var end = limitValue(b || start, start, options.max);\r\n\r\n        if (options.reverse) {\r\n            start *= -1;\r\n            end *= -1;\r\n        }\r\n\r\n        start = (540 - start - startAngle) % 360;\r\n        end = (540 - end - startAngle) % 360;\r\n\r\n        if (end < start) {\r\n            var tmp = start;\r\n            start = end;\r\n            end = tmp;\r\n        }\r\n\r\n        return new Ring(box.center(), 0, box.height() / 2, start, end - start);\r\n    };\r\n\r\n    PolarAxis.prototype.slot = function slot (from, to) {\r\n        if ( to === void 0 ) to = from;\r\n\r\n        var options = this.options;\r\n        var start = 360 - options.startAngle;\r\n        var slot = this.getSlot(from, to);\r\n        var min = Math.min(from, to);\r\n        var max = Math.max(from, to);\r\n        var startAngle, endAngle;\r\n\r\n        if (options.reverse) {\r\n            startAngle = min;\r\n            endAngle = max;\r\n        } else {\r\n            startAngle = 360 - max;\r\n            endAngle = 360 - min;\r\n        }\r\n\r\n        startAngle = (startAngle + start) % 360;\r\n        endAngle = (endAngle + start) % 360;\r\n\r\n        return new geom.Arc([ slot.center.x, slot.center.y ], {\r\n            startAngle: startAngle,\r\n            endAngle: endAngle,\r\n            radiusX: slot.radius,\r\n            radiusY: slot.radius\r\n        });\r\n    };\r\n\r\n    PolarAxis.prototype.getValue = function getValue (point) {\r\n        var options = this.options;\r\n        var center = this.box.center();\r\n        var dx = point.x - center.x;\r\n        var dy = point.y - center.y;\r\n        var theta = Math.round(deg(Math.atan2(dy, dx)));\r\n        var start = options.startAngle;\r\n\r\n        if (!options.reverse) {\r\n            theta *= -1;\r\n            start *= -1;\r\n        }\r\n\r\n        return (theta + start + 360) % 360;\r\n    };\r\n\r\n    PolarAxis.prototype.valueRange = function valueRange () {\r\n        return {\r\n            min: 0,\r\n            max: Math.PI * 2\r\n        };\r\n    };\r\n\r\n    return PolarAxis;\r\n}(Axis));\r\n\r\nsetDefaultOptions(PolarAxis, {\r\n    type: \"polar\",\r\n    startAngle: 0,\r\n    reverse: false,\r\n    majorUnit: 60,\r\n    min: 0,\r\n    max: 360,\r\n    labels: {\r\n        margin: getSpacing(10)\r\n    },\r\n    majorGridLines: {\r\n        color: BLACK,\r\n        visible: true,\r\n        width: 1\r\n    },\r\n    minorGridLines: {\r\n        color: \"#aaa\"\r\n    }\r\n});\r\n\r\ndeepExtend(PolarAxis.prototype, GridLinesMixin, {\r\n    createPlotBands: RadarCategoryAxis.prototype.createPlotBands,\r\n    majorAngles: RadarCategoryAxis.prototype.majorAngles,\r\n    range: NumericAxis.prototype.range,\r\n    labelsCount: NumericAxis.prototype.labelsCount,\r\n    createAxisLabel: NumericAxis.prototype.createAxisLabel\r\n});\r\n\r\nexport default PolarAxis;"]},"metadata":{},"sourceType":"module"}